#include <iostream>
#include <thread>
#include "Util/Timer.cpp"
#include "Contract/Coin.cpp"
#include "Graph/Lockfree/Graph.cpp"
#include "Util/FILEOPR.cpp"

#define MAX_THREADS 128
#define M_SharedObj 5000
#define FUN_IN_CONT 3
#define pl "===================================\n"

using namespace std;
using namespace std::chrono;

int    SObj    = 2;        //! SObj: number of shared objects; at least 2, to send & recive.
int    nThread = 1;        //! nThread: total number of concurrent threads; default is 1.
int    numAUs;             //! numAUs: total number of Atomic Unites to be executed.
double lemda;              //! Î»: random delay seed.
double tTime[2];           //! total time taken by miner and validator algorithm.
Coin   *coin;              //! smart contract.
Graph  *cGraph;            //! conflict grpah generated by miner to be given to validator.
int    *aCount;            //! aborted transaction count.
float_t*mTTime;            //! time taken by each miner Thread to execute AUs (Transactions).
float_t*vTTime;            //! time taken by each validator Thread to execute AUs (Transactions).
vector<string>listAUs;     //! holds AUs to be executed on smart contract: "listAUs" index+1 represents AU_ID.
std::atomic<int>currAU;    //! used by miner-thread to get index of Atomic Unit to execute.
std::atomic<int>gNodeCount;//! # of valid AU node added in graph (invalid AUs will not be part of the graph & conflict list).
std::atomic<int>eAUCount;  //! used by validator threads to keep track of how many valid AUs executed by validator threads.
std::atomic<int>*mAUT;     //! array to map AUs to Trans id (time stamp); mAUT[index] = TransID, index+1 = AU_ID.
std::atomic<int>*status;   //! used by pool threads:: -1 = thread join; 0 = wait; 1 = execute AUs given in ref[].
Graph::Graph_Node **Gref;  //! used by pool threads:: graph node (AU) reference to be execute by respective Pool thread.

/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!    Class "Miner" CREATE & RUN "n" miner-THREAD CONCURRENTLY           !
!"concMiner()" CALLED BY miner-THREAD TO PERFROM oprs of RESPECTIVE AUs !
! THREAD 0 IS CONSIDERED AS MINTER-THREAD (SMART CONTRACT DEPLOYER)     !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
class Miner
{
	public:
	Miner(int minter_id)
	{
		cGraph     = new Graph();
		currAU     = 0;                                 //! initialize the counter used to execute the numAUs to 0.
		gNodeCount = 0;                                 //! initialize the graph node counter to 0 (number of AUs added in graph, invalid AUs are not part of the grpah).
		mTTime     = new float_t [nThread];           //! array index location represents respective thread id.
		aCount     = new int [nThread];
		for( int i = 0; i < nThread; i++ ) 
		{
			mTTime[i] = 0;
			aCount[i] = 0;
		}
		coin = new Coin(SObj, minter_id);               //! id of the contract creater is "minter_id".
	}


	//!------------------------------------------------------------------------- 
	//!!!!!!!! MAIN MINER:: CREATE MINER + GRAPH CONSTRUCTION THREADS !!!!!!!!!!
	//!-------------------------------------------------------------------------
	void mainMiner()
	{
		Timer Ltimer;
		thread T[nThread];
		int ts, bal = 1000, total = 0;

		//! initialization of account with fixed ammount; mint() is assume to be serial.
//		cout<<pl<<"SHARED OBJECTS INITIAL STATE\n"<<pl<<"SObj ID | INITIAL STATE\n"<<pl;
		for(int sid = 1; sid <= SObj; sid++) 
		{
			//! 0 is contract deployer.
			while(coin->mint_m(0, sid, bal, &ts) == false)
			{
				aCount[0]++;
			}
//			cout<<"  "+to_string(sid)+"  \t|  "+to_string(bal)+"\n";
			total = total + bal;
		}
//		cout<<pl<<"  SUM   |  "<<total<<"\n"<<pl;

		//!-----------------------------------------------------------
		//!!!!!!!!!!    Create nThread Miner threads      !!!!!!!!!!
		//!-----------------------------------------------------------
//		cout<<"!!!!!!!   Lock-Free Miner Thread Started        !!!!!!\n";
		double start = Ltimer.timeReq();                //! start timer.
		for( int i = 0; i < nThread; i++ ) 
		{
			T[i] = thread(concMiner, i, numAUs, cGraph);//! create "nThread" miner threads.
		}
		for( auto &th : T) 
		{
			th.join ( );                 //! miner thread join.
		}
		tTime[0] = Ltimer.timeReq() - start;        //! end timer to get time taken by miner algorithm.
//		cout<<"!!!!!!!   Lock-Free Miner Thread Join           !!!!!!\n";

//		cGraph->print_grpah();                          //! print conflict grpah generated by miner.
//		FILEOPR file_opr;
//		file_opr.pAUTrns(mAUT, numAUs);        //! print AU_ID and Timestamp.
//		finalState();                                   //! print the final state of the shared objects.
	}


	//!--------------------------------------------------------
	//! The function to be executed by all the miner threads. !
	//!--------------------------------------------------------
	static void concMiner( int t_ID, int numAUs, Graph *cGraph)
	{
		Timer Ttimer;
		bool flag   = true;                             //! flag is used to add valid AUs in Graph (invalid AU: senders does't have sufficent balance to send).
		int  curInd = currAU++;                         //! get the current index, and increment it.
		auto start  = Ttimer._timeStart();               //! statrt clock to get time taken by this transaction.

		while(curInd < numAUs)
		{
			int t_stamp;                                //! trns_id of STM_BTO_transaction that successfully executed this AU.
			list<int>conf_list;                         //! trans_ids with which this AU.trans_id is conflicting.
			istringstream ss(listAUs[curInd]);          //! get the AU to execute, which is of string type.

			string tmp;
			ss >> tmp;                                  //! AU_ID to Execute.

			int AU_ID = stoi(tmp);

			ss >> tmp;                                  //! Function Name (smart contract).

			if(tmp.compare("get_bal") == 0)
			{
				ss >> tmp;                              //! get balance of SObj/id.
				int s_id = stoi(tmp);
				int bal  = 0;

				//! get_bal() of smart contract.
				bool v = coin->get_bal_m(s_id, &bal, t_ID, &t_stamp, conf_list);
				while(v == false)                       //! execute again if tryCommit fails.
				{
					aCount[t_ID]++;
					v = coin->get_bal_m(s_id, &bal, t_ID, &t_stamp, conf_list);
				}
				mAUT[AU_ID-1] = t_stamp;
			}

			if(tmp.compare("send") == 0)
			{
				ss >> tmp;                              //! Sender ID.
				int s_id  = stoi(tmp);
				
				ss >> tmp;                              //! Reciver ID.
				int r_id  = stoi(tmp);

				ss >> tmp;                              //! Ammount to send.
				int amt   = stoi(tmp);
				
				int v = coin->send_m(t_ID, s_id, r_id, amt, &t_stamp, conf_list);
				while(v != 1 )                          //! execute again if tryCommit fails.
				{
					aCount[t_ID]++;
					v = coin->send_m(t_ID, s_id, r_id, amt, &t_stamp, conf_list);
					if(v == -1)
					{
						flag = false;                   //! invalid AU: sender does't have sufficent balance to send.
						//cout << "ERROR:: 'AU "+to_string(AU_ID)+" is INVALID' sender does't have sufficent balance to send, Transaction Aborted\n";
						break;                                    
					}
				}
				mAUT[AU_ID-1] = t_stamp;
			}

			//! graph construction for committed AUs.
			if (flag == true)
			{
				gNodeCount++;                           //! increase graph node counter (Valid AU executed).
				//! get respective tran conflict list using lib fun.
				//list<int>conf_list = lib->get_conf(t_stamp);
				
				//! IMP::delete time stamps in conflict list, which are added
				//! because of initilization version by mnit() trycommit.
				for(int y=0; y<=2*SObj; y++) conf_list.remove(y);

				//!------------------------------------------
				//! conf_list come from contract fun using  !
				//! pass by argument of get_bel() and send()!
				//!------------------------------------------
				if(conf_list.begin() == conf_list.end())//! when AU_ID conflict is empty.
				{
					Graph:: Graph_Node *tempRef;
					cGraph->add_node(AU_ID, t_stamp, &tempRef);
				}

				for(auto it = conf_list.begin(); it != conf_list.end(); it++)
				{
					int i = 0;
					while(*it != mAUT[i])               //! find the conf_AU_ID in map table given conflicting time-stamp.
						i = (i+1)%numAUs; 

					int cAUID   = i+1;                  //! because array index start with 0 and index+1 respresent AU_ID.
					int cTstamp = mAUT[i];              //! conflicting AU_ID with this.AU_ID.
					
					if(cTstamp  < t_stamp)              //! edge from conf_AU_ID to AU_ID.
					cGraph->add_edge(cAUID, AU_ID, cTstamp, t_stamp);
					
					if(cTstamp > t_stamp)               //! edge from AU_ID to conf_AU_ID.
					cGraph->add_edge(AU_ID, cAUID, t_stamp, cTstamp);
				}
			}
			flag   = true;                              //! reset flag for next AU.
			curInd = currAU++;                          //! get the current index to execute, and increment it.
		}
		mTTime[t_ID] = mTTime[t_ID] + Ttimer._timeStop( start );
	}

	//!-------------------------------------------------
	//!FINAL STATE OF ALL THE SHARED OBJECT. Once all  |
	//!AUs executed. we are geting this using get_bel()|
	//!-------------------------------------------------
	void finalState()
	{
		list<int>cList;	int total = 0;
		cout<<pl<<"SHARED OBJECTS FINAL STATE\n"<<pl<<"SObj ID | FINAL STATE\n"<<pl;
		for(int sid = 1; sid <= SObj; sid++) 
		{
			int bal = 0, ts;
			//! get_bal() of smart contract, execute again if tryCommit fails.
			while(coin->get_bal_m(sid, &bal, 0, &ts, cList)==false) 
			{ 
				
			}
			cout<<"  "+to_string(sid)+"  \t|  "+to_string(bal)+"\n";
			total = total + bal;
		}
		cout<<pl<<"  SUM   |  "<<total<<"\n"<<pl;
//		cout<<"\n Number of Valid   AUs = "+to_string(gNodeCount)+" (Grpah Nodes:: AUs Executed Successfully)\n";
//		cout<<" Number of Invalid AUs = "+to_string(numAUs-gNodeCount)+"\n";
	}
	~Miner() { };
};



/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Class "Validator" CREATE & RUN "n" validator-THREAD   !
! CONCURRENTLY BASED ON CONFLICT GRPAH GIVEN BY MINER.  !
! "concValidator()" CALLED BY validator-THREAD TO       !
! PERFROM OPERATIONS of RESPECTIVE AUs.  THREAD 0 IS    !
! CONSIDERED AS MINTER-THREAD (SMART CONTRACT DEPLOYER) !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
class Validator
{
public:
	Validator()
	{
		eAUCount = 0;
		
		//! thread id represents index location.
		vTTime = new float_t[nThread+1];

		status = new std::atomic<int>[nThread+1];
		Gref   = new Graph::Graph_Node*[nThread+1];

		int i = 0;
		for( ; i < nThread; i++)
		{
			status[i] = 0;
			Gref[i]   = NULL;
			vTTime[i] = 0;	
		}
		vTTime[i] = 0;
	};
	
	//!-------------------------------------------------
	//! CREATE MASTER THREADS: CREATES n WORKER        !
	//! THREADs TO EXECUTE VALID AUs IN CONFLICT GRAPH.!
	//!-------------------------------------------------
	void mainValidator()
	{
		Timer Ttimer;
		int bal = 1000, total = 0;

		//! initialization of account with fixed ammount;
		//! mint_val() function is assume to be serial.
		for(int sid = 1; sid <= SObj; sid++) 
		{
			bool r = coin->mint(0, sid, bal); //! 0 is contract deployer.
			total  = total + bal;
		}

		//!----------------------------------------------------
		//! MASTER THREAD CREATE n VALIDATOR THREADS          !
		//!----------------------------------------------------
//		cout<<"!!!!!!!   Lock-Free Validator Thread Started    !!!!!!\n";
		//!Start clock
		double start = Ttimer.timeReq();
		
		thread master = thread(concValidator, 0 );
		master.join();
		
		//!Stop clock
		tTime[1] = Ttimer.timeReq() - start;
//		cout<<"!!!!!!!   Lock-Free Validator Thread Join       !!!!!!\n\n";

//		finalState();                                   //! print the final state of the shared objects by validator.
	}

	//!--------------------------------------------------------
	//! The function to be executed by all Validator threads. !
	//!--------------------------------------------------------
	static void concValidator( int t_ID )
	{
		Timer Ttimer;
		//! start timer to get time taken by this thread.
		auto start = Ttimer._timeStart();

		//! ONLY MASTER THREAD WILL EXECUTE IT.
		if(t_ID == 0)
		{
			thread POOL[nThread+1];
			bool tCratFlag = true;//! POOL thread creation flag.
			Graph::Graph_Node *mVItr;
			while(true)
			{
				if(tCratFlag == true)
				{
					//! Creating n POOL Threads
					for(int i = 1; i <= nThread; i++)
					{
						POOL[i] = thread(concValidator, i);
					}
					tCratFlag = false;
				}
				//! All Valid AUs executed.
				if(eAUCount == gNodeCount)
				{
					for(int i = 1; i <= nThread; i++)
					{
						//! -1 = threads can join now.
						status[i] = -1;
					}
					
					//! POOL thread join.
					for(int i = 1; i <= nThread; i++)
					{
						POOL[i].join( );
					}
					break;
				}
				mVItr = cGraph->verHead->next;
				while(mVItr != cGraph->verTail)
				{
					if(mVItr->in_count == 0)
					{
						for(int i = 1; i <= nThread; i++)
						{
							//! 0 = thread is available.
							if(status[i] == 0)
							{
								//! assigning node ref for
								//! thread in pool to execute.
								Gref[i] = mVItr;
								//! 1 = ref is available to execute.
								status[i] = 1;
								break;
							}
						}
					}
					mVItr = mVItr->next;
				}
			}
		}
		//! EXECCUTED BY nThread WORKER THREADS.
		else
		{
			while(true)
			{
				if(status[t_ID] == -1 || eAUCount == gNodeCount) 
					break;//! All task done.
				
				if(status[t_ID] == 1)//! Task available to work on.
				{
					Graph::Graph_Node *verTemp;
					verTemp      = Gref[t_ID];
					if(verTemp->in_count == 0)
					{
						if(verTemp->in_count < 0)
						{
							status[t_ID] = 0;
						}
						else
						{
							//! expected in_degree is 0 then
							//! vertex can be executed if 
							//! not claimed by other thread.
							int expected = 0;
							if(atomic_compare_exchange_strong( &(verTemp->in_count), &expected, -1 ) == true)
							{
								verTemp->in_count = -1;
								//! get AU to execute, which is of string type;
								//! listAUs index statrt with 0 => -1.
								istringstream ss(listAUs[(verTemp->AU_ID)-1]);
								string tmp;

								//! AU_ID to Execute.
								ss >> tmp;
								int AU_ID = stoi(tmp);
								//! Function Name (smart contract).
								ss >> tmp;
								if( tmp.compare("get_bal") == 0 )
								{
									//! get balance of SObj/id.
									ss >> tmp;
									int s_id = stoi(tmp);
									int bal  = 0;

									//! get_bal() of smart contract.
									bool v = coin->get_bal(s_id, &bal);
								}
								if( tmp.compare("send") == 0 )
								{
									//! Sender ID.
									ss >> tmp;
									int s_id = stoi(tmp);

									//! Reciver ID.
									ss >> tmp;
									int r_id = stoi(tmp);
									//! Ammount to send.
									ss >> tmp;
									int amt  = stoi(tmp);
									bool v   = coin->send(s_id, r_id, amt);
								}
								Graph::EdgeNode *eTemp = verTemp->edgeHead->next;
								while( eTemp != verTemp->edgeTail)
								{
									Graph::Graph_Node* refVN = (Graph::Graph_Node*)eTemp->ref;
									refVN->in_count--;
									eTemp = eTemp->next;
								}
								//! num of Valid AUs executed is eAUCount+1.
								eAUCount++;
							}
						}
					}
					//Gref[t_ID]   = NULL;
					status[t_ID] = 0;
				}
			}
		}
		vTTime[t_ID] = vTTime[t_ID] + Ttimer._timeStop( start );
	}


	//!-------------------------------------------------
	//!FINAL STATE OF ALL THE SHARED OBJECT. Once all  |
	//!AUs executed. Geting this using get_bel_val()   |
	//!-------------------------------------------------
	void finalState()
	{
		int total = 0;
		cout<<pl<<"SHARED OBJECTS FINAL STATE\n"<<pl<<"SObj ID | FINAL STATE\n"<<pl;
		for(int sid = 1; sid <= SObj; sid++) 
		{
			int bal = 0, ts;
			bool v  = coin->get_bal(sid, &bal);
			total   = total + bal;
			cout<<"  "+to_string(sid)+"  \t|  "+to_string(bal)+"\n";
		}
		cout<<pl<<"  SUM   |  "<<total<<"\n"<<pl;
	}

	~Validator() { };
};



/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
/*!!!!!!!!          main()         !!!!!!!!!!*/
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
int main( )
{
	//! list holds the avg time taken by miner and Validator
	//! thread s for multiple consecutive runs.
	list<double>mItrT;
	list<double>vItrT;
	int totalDepInG = 0; //to get total number of dependencies in graph;

	
	FILEOPR file_opr;
	//! read from input file:: SObj = #SObj; nThread = #threads;
	//! numAUs = #AUs; Î» = random delay seed.
	file_opr.getInp(&SObj, &nThread, &numAUs, &lemda);
	//! max shared object error handling.
	if(SObj > M_SharedObj) 
	{
		SObj = M_SharedObj;
		cout<<"Max number of Shared Object can be "<<M_SharedObj<<"\n";
	}

	cout<<pl<<"MVTO Forkjoin Lock Free Algorithm \n"<<pl;
	int totalRun = 6;
	for(int numItr = 0; numItr < totalRun; numItr++)
	{
		 //! generates AUs (i.e. trans to be executed by miner & validator).
		file_opr.genAUs(numAUs, SObj, FUN_IN_CONT, listAUs);

		//! index+1 represents respective AU id, and
		//! mAUT[index] represents "time stamp (commited trans)".
		mAUT = new std::atomic<int>[numAUs];
		for(int i = 0; i< numAUs; i++)
		{
			mAUT[i] = 0;
		}
		Timer mTimer;
		mTimer.start();

		//MINER
		Miner *miner = new Miner(0);
		miner ->mainMiner();

		if(numItr > 0)//skip first run
		totalDepInG += cGraph->print_grpah();//give dependenices in the graph.

		//VALIDATOR
		Validator *validator = new Validator();
		validator ->mainValidator();

		mTimer.stop();

		int vAUs = gNodeCount;//total valid AUs among total AUs executed by miner and varified by Validator.
		if(numItr > 0)//skip first run
		file_opr.writeOpt(SObj, nThread, numAUs, tTime, mTTime, vTTime, aCount, vAUs, mItrT, vItrT);

//		cout<<"\n===================== Execution "<<numItr+1<<" Over =====================\n"<<endl;

		listAUs.clear();
		delete miner;
		miner     = NULL;
		delete cGraph;
		cGraph    = NULL;
		delete validator;
		validator = NULL;
	}
	
	double tAvgMinerT = 0, tAvgValidT = 0;//to get total avg miner and validator time after number of totalRun runs.
	auto mit = mItrT.begin();
	auto vit = vItrT.begin();
	for(int j = 1; j < totalRun; j++)
	{
		tAvgMinerT = tAvgMinerT + *mit;
//		cout<<"\n    Avg Miner = "<<*mit;
		tAvgValidT = tAvgValidT + *vit;
//		cout<<"\nAvg Validator = "<<*vit;
		mit++;
		vit++;
	}
	tAvgMinerT = tAvgMinerT/(totalRun-1);
	tAvgValidT = tAvgValidT/(totalRun-1);
	cout<<pl<<"    Total Avg Miner       = "<<tAvgMinerT<<" microseconds";
	cout<<"\nTotal Avg Validator       = "<<tAvgValidT<<" microseconds";
	cout<<"\nAvg Dependencies in Graph = "<<totalDepInG/(totalRun-1);
//	cout<<"\n  Total Avg (M + V) = "<<tAvgMinerT+tAvgValidT<<" microseconds";
	cout<<"\n"<<pl;

	mItrT.clear();
	vItrT.clear();

	delete mTTime;
	delete vTTime;
	delete aCount;


return 0;
}
